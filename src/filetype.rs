pub struct FileType {
    name: String,
    hl_opts: HighlightingOptions,
}

#[derive(Default)]
pub struct HighlightingOptions {
    numbers: bool,
    strings: bool,
    characters: bool,
    comments: bool,
    multiline_comments: bool,
    primary_keywords: Vec<String>,
    secondary_keywords: Vec<String>,
    operators: Vec<String>,
    methods: bool,
    atrributes: bool,
    separator: bool,
}

impl Default for FileType {
    fn default() -> Self {
        Self {
            name: String::from("No filetype"),
            hl_opts: HighlightingOptions::default(),
        }
    }
}

impl FileType {
    pub fn name(&self) -> String {
        self.name.clone()
    }

    pub fn highlighting_options(&self) -> &HighlightingOptions {
        &self.hl_opts
    }

    pub fn from(file_name: &str) -> Self {
        if file_name.ends_with(".rs") {
            return Self {
                name: String::from("Rust"),
                hl_opts: HighlightingOptions { 
                    numbers: true,
                    strings: true,
                    characters: true,
                    comments: true,
                    multiline_comments: true,
                    methods: true,
                    atrributes: true,
                    separator: true,
                    primary_keywords: vec![
                        "as".to_string(),
                        "break".to_string(),
                        "const".to_string(),
                        "continue".to_string(),
                        "crate".to_string(),
                        "else".to_string(),
                        "enum".to_string(),
                        "extern".to_string(),
                        "false".to_string(),
                        "fn".to_string(),
                        "for".to_string(),
                        "if".to_string(),
                        "impl".to_string(),
                        "in".to_string(),
                        "let".to_string(),
                        "loop".to_string(),
                        "match".to_string(),
                        "mod".to_string(),
                        "move".to_string(),
                        "mut".to_string(),
                        "pub".to_string(),
                        "ref".to_string(),
                        "return".to_string(),
                        "self".to_string(),
                        "Self".to_string(),
                        "static".to_string(),
                        "struct".to_string(),
                        "super".to_string(),
                        "trait".to_string(),
                        "true".to_string(),
                        "type".to_string(),
                        "unsafe".to_string(),
                        "use".to_string(),
                        "where".to_string(),
                        "while".to_string(),
                        "dyn".to_string(),
                        "abstract".to_string(),
                        "become".to_string(),
                        "box".to_string(),
                        "do".to_string(),
                        "final".to_string(),
                        "macro".to_string(),
                        "override".to_string(),
                        "priv".to_string(),
                        "typeof".to_string(),
                        "unsized".to_string(),
                        "virtual".to_string(),
                        "yield".to_string(),
                        "async".to_string(),
                        "await".to_string(),
                        "try".to_string(),
                    ],
                    secondary_keywords: vec![
                        "bool".to_string(),
                        "char".to_string(),
                        "i8".to_string(),
                        "i16".to_string(),
                        "i32".to_string(),
                        "i64".to_string(),
                        "isize".to_string(),
                        "u8".to_string(),
                        "u16".to_string(),
                        "u32".to_string(),
                        "u64".to_string(),
                        "usize".to_string(),
                        "f32".to_string(),
                        "f64".to_string(),
                    ],
                    operators: vec![
                        "+".to_string(),
                        "-".to_string(),
                        "*".to_string(),
                        "/".to_string(),
                        "%".to_string(),
                        "^".to_string(),
                        "&".to_string(),
                        "|".to_string(),
                        "!".to_string(),
                        "~".to_string(),
                        "=".to_string(),
                        "<".to_string(),
                        ">".to_string(),
                        "?".to_string(),
                        ":".to_string(),
                        "->".to_string(),
                        "=>".to_string(),
                        "<<".to_string(),
                        ">>".to_string(),
                        "++".to_string(),
                        "--".to_string(),
                        "+=".to_string(),
                        "-=".to_string(),
                        "*=".to_string(),
                        "/=".to_string(),
                        "%=".to_string(),
                        "^=".to_string(),
                        "&=".to_string(),
                        "|=".to_string(),
                        "==".to_string(),
                        "!=".to_string(),
                        "<=".to_string(),
                        ">=".to_string(),
                        "&&".to_string(),
                        "||".to_string(),
                        "++".to_string(),
                        "--".to_string(),
                        "..".to_string(),
                        "...".to_string(),
                        "->".to_string(),
                        "=>".to_string(),
                        "@".to_string(),
                        "$".to_string(),
                        "#".to_string(),
                        "!=".to_string(),
                        "!==".to_string(),
                        "===".to_string(),
                        "!===".to_string(),
                    ]
                 },
            }
        } else if file_name.ends_with(".py") {
            return Self {
                name: String::from("Python"),
                hl_opts: HighlightingOptions { 
                    numbers: true,
                    strings: true,
                    characters: true,
                    comments: true,
                    multiline_comments: true,
                    methods: true,
                    atrributes: true,
                    separator: true,
                    primary_keywords: vec![
                        "False".to_string(),
                        "None".to_string(),
                        "True".to_string(),
                        "and".to_string(),
                        "as".to_string(),
                        "assert".to_string(),
                        "async".to_string(),
                        "await".to_string(),
                        "break".to_string(),
                        "class".to_string(),
                        "continue".to_string(),
                        "def".to_string(),
                        "del".to_string(),
                        "elif".to_string(),
                        "else".to_string(),
                        "except".to_string(),
                        "finally".to_string(),
                        "for".to_string(),
                        "from".to_string(),
                        "global".to_string(),
                        "if".to_string(),
                        "import".to_string(),
                        "in".to_string(),
                        "is".to_string(),
                        "lambda".to_string(),
                        "nonlocal".to_string(),
                        "not".to_string(),
                        "or".to_string(),
                        "pass".to_string(),
                        "raise".to_string(),
                        "return".to_string(),
                        "try".to_string(),
                        "while".to_string(),
                        "with".to_string(),
                        "yield".to_string(),
                    ],
                    secondary_keywords: vec![
                        "abs".to_string(),
                        "all".to_string(),
                        "any".to_string(),
                        "ascii".to_string(),
                        "bin".to_string(),
                        "bool".to_string(),
                        "bytearray".to_string(),
                        "bytes".to_string(),
                        "callable".to_string(),
                        "chr".to_string(),
                        "classmethod".to_string(),
                        "compile".to_string(),
                        "complex".to_string(),
                        "delattr".to_string(),
                        "dict".to_string(),
                        "dir".to_string(),
                        "divmod".to_string(),
                        "enumerate".to_string(),
                        "eval".to_string(),
                        "exec".to_string(),
                        "filter".to_string(),
                        "float".to_string(),
                        "format".to_string(),
                        "frozenset".to_string(),
                        "getattr".to_string(),
                        "globals".to_string(),
                        "hasattr".to_string(),
                        "hash".to_string(),
                        "help".to_string(),
                        "hex".to_string(),
                        "id".to_string(),
                        "input".to_string(),
                        "int".to_string(),
                        "isinstance".to_string(),
                        "issubclass".to_string(),
                        "iter".to_string(),
                        "len".to_string(),
                        "list".to_string(),
                        "locals".to_string(),
                        "map".to_string(),
                        "max".to_string(),
                        "memoryview".to_string(),
                        "min".to_string(),
                        "next".to_string(),
                        "object".to_string(),
                        "oct".to_string(),
                        "open".to_string(),
                        "ord".to_string(),
                        "pow".to_string(),
                        "print".to_string(),
                        "property".to_string(),
                        "range".to_string(),
                        "repr".to_string(),
                        "reversed".to_string(),
                        "round".to_string(),
                        "set".to_string(),
                        "setattr".to_string(),
                        "slice".to_string(),
                        "sorted".to_string(),
                        "staticmethod".to_string(),
                        "str".to_string(),
                        "sum".to_string(),
                        "super".to_string(),
                        "tuple".to_string(),
                        "type".to_string(),
                        "vars".to_string(),
                        "zip".to_string(),
                        "__import__".to_string(),
                        "NotImplemented".to_string(),
                        "Ellipsis".to_string(),
                    ],
                    operators: vec![
                        "+".to_string(),
                        "-".to_string(),
                        "*".to_string(),
                        "/".to_string(),
                        "%".to_string(),
                        "^".to_string(),
                        "&".to_string(),
                        "|".to_string(),
                        "!".to_string(),
                        "~".to_string(),
                        "=".to_string(),
                        "<".to_string(),
                        ">".to_string(),
                        "?".to_string(),
                        ":".to_string(),
                        "->".to_string(),
                        "=>".to_string(),
                        "<<".to_string(),
                        ">>".to_string(),
                        "++".to_string(),
                        "--".to_string(),
                        "+=".to_string(),
                        "-=".to_string(),
                        "*=".to_string(),
                        "/=".to_string(),
                        "%=".to_string(),
                        "^=".to_string(),
                        "&=".to_string(),
                        "|=".to_string(),
                        "==".to_string(),
                        "!=".to_string(),
                        "<=".to_string(),
                        ">=".to_string(),
                        "&&".to_string(),
                        "||".to_string(),
                        "++".to_string(),
                        "--".to_string(),
                        "..".to_string(),
                        "...".to_string(),
                        "->".to_string(),
                        "=>".to_string(),
                        "@".to_string(),
                        "$".to_string(),
                        "#".to_string(),
                        "!=".to_string(),
                        "!==".to_string(),
                        "===".to_string(),
                        "!===".to_string(),
                    ]
                 },
            }
        } else if file_name.ends_with(".js") {
            return Self {
                name: String::from("Javascript"),
                hl_opts: HighlightingOptions {
                    numbers: true,
                    strings: true,
                    characters: true,
                    comments: true,
                    multiline_comments: true,
                    methods: true,
                    atrributes: true,
                    separator: true,
                    primary_keywords: vec![
                        "break".to_string(),
                        "case".to_string(),
                        "catch".to_string(),
                        "class".to_string(),
                        "const".to_string(),
                        "continue".to_string(),
                        "debugger".to_string(),
                        "default".to_string(),
                        "delete".to_string(),
                        "do".to_string(),
                        "else".to_string(),
                        "export".to_string(),
                        "extends".to_string(),
                        "finally".to_string(),
                        "for".to_string(),
                        "function".to_string(),
                        "if".to_string(),
                        "import".to_string(),
                        "in".to_string(),
                        "instanceof".to_string(),
                        "new".to_string(),
                        "return".to_string(),
                        "super".to_string(),
                        "switch".to_string(),
                        "this".to_string(),
                        "throw".to_string(),
                        "try".to_string(),
                        "typeof".to_string(),
                        "var".to_string(),
                        "void".to_string(),
                        "while".to_string(),
                        "with".to_string(),
                        "yield".to_string(),
                    ],
                    secondary_keywords: vec![
                        "arguments".to_string(),
                        "await".to_string(),
                        "boolean".to_string(),
                        "byte".to_string(),
                        "char".to_string(),
                        "double".to_string(),
                        "enum".to_string(),
                        "final".to_string(),
                        "float".to_string(),
                        "goto".to_string(),
                        "implements".to_string(),
                        "int".to_string(),
                        "interface".to_string(),
                        "long".to_string(),
                        "native".to_string(),
                        "package".to_string(),
                        "private".to_string(),
                        "protected".to_string(),
                        "public".to_string(),
                        "short".to_string(),
                        "static".to_string(),
                        "synchronized".to_string(),
                        "throws".to_string(),
                        "transient".to_string(),
                        "volatile".to_string(),
                        "null".to_string(),
                        "undefined".to_string(),
                        "NaN".to_string(),
                        "Infinity".to_string(),
                        "true".to_string(),
                        "false".to_string(),
                    ],
                    operators: vec![
                        "+".to_string(),
                        "-".to_string(),
                        "*".to_string(),
                        "/".to_string(),
                        "%".to_string(),
                        "^".to_string(),
                        "&".to_string(),
                        "|".to_string(),
                        "!".to_string(),
                        "~".to_string(),
                        "=".to_string(),
                        "<".to_string(),
                        ">".to_string(),
                        "?".to_string(),
                        ":".to_string(),
                        "->".to_string(),
                        "=>".to_string(),
                        "<<".to_string(),
                        ">>".to_string(),
                        "++".to_string(),
                        "--".to_string(),
                        "+=".to_string(),
                        "-=".to_string(),
                        "*=".to_string(),
                        "/=".to_string(),
                        "%=".to_string(),
                        "^=".to_string(),
                        "&=".to_string(),
                        "|=".to_string(),
                        "==".to_string(),
                        "!=".to_string(),
                        "<=".to_string(),
                        ">=".to_string(),
                        "&&".to_string(),
                        "||".to_string(),
                        "++".to_string(),
                        "--".to_string(),
                        "..".to_string(),
                        "...".to_string(),
                        "->".to_string(),
                        "=>".to_string(),
                        "@".to_string(),
                        "$".to_string(),
                        "#".to_string(),
                        "!=".to_string(),
                        "!==".to_string(),
                        "===".to_string(),
                        "!===".to_string(),
                    ]
                 },
            }
        } else if file_name.ends_with(".ts") {
            return Self {
                name: String::from("Typescript"),
                hl_opts: HighlightingOptions {
                    numbers: true,
                    strings: true,
                    characters: true,
                    comments: true,
                    multiline_comments: true,
                    methods: true,
                    atrributes: true,
                    separator: true,
                    primary_keywords: vec![
                        "break".to_string(),
                        "case".to_string(),
                        "catch".to_string(),
                        "class".to_string(),
                        "const".to_string(),
                        "continue".to_string(),
                        "debugger".to_string(),
                        "default".to_string(),
                        "delete".to_string(),
                        "do".to_string(),
                        "else".to_string(),
                        "export".to_string(),
                        "extends".to_string(),
                        "finally".to_string(),
                        "for".to_string(),
                        "function".to_string(),
                        "if".to_string(),
                        "import".to_string(),
                        "in".to_string(),
                        "instanceof".to_string(),
                        "new".to_string(),
                        "return".to_string(),
                        "super".to_string(),
                        "switch".to_string(),
                        "this".to_string(),
                        "throw".to_string(),
                        "try".to_string(),
                        "typeof".to_string(),
                        "var".to_string(),
                        "void".to_string(),
                        "while".to_string(),
                        "with".to_string(),
                        "yield".to_string(),
                    ],
                    secondary_keywords: vec![
                        "arguments".to_string(),
                        "await".to_string(),
                        "boolean".to_string(),
                        "byte".to_string(),
                        "char".to_string(),
                        "double".to_string(),
                        "enum".to_string(),
                        "final".to_string(),
                        "float".to_string(),
                        "goto".to_string(),
                        "implements".to_string(),
                        "int".to_string(),
                        "interface".to_string(),
                        "long".to_string(),
                        "native".to_string(),
                        "package".to_string(),
                        "private".to_string(),
                        "protected".to_string(),
                        "public".to_string(),
                        "short".to_string(),
                        "static".to_string(),
                        "synchronized".to_string(),
                        "throws".to_string(),
                        "transient".to_string(),
                        "volatile".to_string(),
                        "null".to_string(),
                        "undefined".to_string(),
                        "NaN".to_string(),
                        "Infinity".to_string(),
                        "true".to_string(),
                        "false".to_string(),
                    ],
                    operators: vec![
                        "+".to_string(),
                        "-".to_string(),
                        "*".to_string(),
                        "/".to_string(),
                        "%".to_string(),
                        "^".to_string(),
                        "&".to_string(),
                        "|".to_string(),
                        "!".to_string(),
                        "~".to_string(),
                        "=".to_string(),
                        "<".to_string(),
                        ">".to_string(),
                        "?".to_string(),
                        ":".to_string(),
                        "->".to_string(),
                        "=>".to_string(),
                        "<<".to_string(),
                        ">>".to_string(),
                        "++".to_string(),
                        "--".to_string(),
                        "+=".to_string(),
                        "-=".to_string(),
                        "*=".to_string(),
                        "/=".to_string(),
                        "%=".to_string(),
                        "^=".to_string(),
                        "&=".to_string(),
                        "|=".to_string(),
                        "==".to_string(),
                        "!=".to_string(),
                        "<=".to_string(),
                        ">=".to_string(),
                        "&&".to_string(),
                        "||".to_string(),
                        "++".to_string(),
                        "--".to_string(),
                        "..".to_string(),
                        "...".to_string(),
                        "->".to_string(),
                        "=>".to_string(),
                        "@".to_string(),
                        "$".to_string(),
                        "#".to_string(),
                        "!=".to_string(),
                        "!==".to_string(),
                        "===".to_string(),
                        "!===".to_string(),
                    ]
                 },
            }
        }

        Self::default()
    }
}

impl HighlightingOptions {
    pub fn numbers(&self) -> bool {
        self.numbers
    }

    pub fn strings(&self) -> bool {
        self.strings
    }

    pub fn characters(&self) -> bool {
        self.characters
    }

    pub fn comments(&self) -> bool {
        self.comments
    }

    pub fn multiline_comments(&self) -> bool {
        self.multiline_comments
    }

    pub fn primary_keywords(&self) -> &Vec<String> {
        &self.primary_keywords
    }

    pub fn secondary_keywords(&self) -> &Vec<String> {
        &self.secondary_keywords
    }

    pub fn operators(&self) -> &Vec<String> {
        &self.operators
    }

    pub fn methods(&self) -> bool {
        self.methods
    }

    pub fn atrributes(&self) -> bool {
        self.atrributes
    }

    pub fn separators(&self) -> bool {
        self.separator
    }
}